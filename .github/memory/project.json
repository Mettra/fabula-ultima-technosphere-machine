{"type":"entity","name":"Fabula Ultima Technosphere Machine","entityType":"FoundryVTT Module","observations":["Version 1.4.0 TypeScript-based Foundry VTT module for the projectfu (Fabula Ultima) RPG system","Implements a gacha-style mnemosphere generation and equipment system where players can roll for magical spheres containing class skills","Built with esbuild, uses ES2022 TypeScript with strict mode, and follows functional programming patterns","Main entry point is scripts/technosphere-machine.ts which sets up all hooks and socket synchronization","Module manifest declares scripts in build/ directory, CSS styles, and English localization","Uses socket communication for multiplayer coordination of mnemosphere rolling between GM and players","Includes sophisticated animation system using animejs for visual effects during mnemosphere creation","Development mode includes hot reloading capabilities and debug tools for animations","Core workflow: Players spend Zenit currency to roll mnemospheres → Items generated with class and skill UUIDs → Players equip mnemospheres on actors → Skills combine and generate 'Mnemo' items → Actors gain enhanced abilities","File structure: scripts/ contains TypeScript source, build/ contains compiled output, templates/ contains Handlebars UI, styles/ contains CSS, packs/ contains compendium data","Integration points: Hooks into Foundry's createItem/updateItem for detection, extends FU actor/party sheets, uses socket system for multiplayer coordination","Key constants: ModuleName = 'fabula-ultima-technosphere-machine', SYSTEM = 'projectfu', MnemosphereHeader = 'Mnemosphere'"]}
{"type":"entity","name":"Relations System","entityType":"Core Data System","observations":["Located in scripts/relation.ts - sophisticated relational database system tracking item-to-mnemosphere-to-skill mappings","Uses branded TypeScript types for type safety: Mnemosphere_ID, Item_ID, Skill_ID, Class_ID, etc.","Relations.Item.mnemosphere maps Item UUIDs to Mnemosphere IDs using a lookup table","Relations.Mnemosphere contains mappings for class (1:1), skill (1:many, max 5), feature (1:many), spell (1:many), heroicskill (1:1), and uuid (1:many)","Provides get/check/expect methods for safe data access with proper error handling","Includes ClearRelations methods for cleanup and LogAll method for debugging","All relations are stored in memory and rebuilt on module load by parsing existing items","Error handling through RelationErrorHandler with console logging and Foundry notifications","Data flow: Item UUID → Mnemosphere_ID → Arrays of Skill/Feature/Spell UUIDs","Table structure: Relations.Item.mnemosphere.tbl = {[itemUuid]: mnemosphereId}, Relations.Mnemosphere.skill.tbl = {[mnemosphereId]: [skillUuid]}","Safety features: Branded types prevent ID mixing, expect() throws errors for missing relations, check() returns undefined safely","Memory management: ClearRelations() removes all data for an ID, relations rebuilt on module load from existing items"]}
{"type":"entity","name":"Mnemosphere Detection System","entityType":"Item Processing System","observations":["Located in scripts/mnemosphere.ts - handles automatic detection and processing of mnemosphere items","Items are identified as mnemospheres when their summary starts with 'Mnemosphere' header","Hooks into createItem and updateItem to automatically process new/modified mnemosphere items","Parses UUID links from item descriptions using extractParagraphsAsLines and parseUUIDLink utilities","Categorizes linked documents: RollTable→class, skill→skill, spell→spell, classFeature→feature, heroic→heroicskill","Maintains Relations mappings automatically as items are created/updated/deleted","Handles summary and description changes dynamically, creating or removing Relations as needed","Uses MnemosphereFromDescription function to extract and classify UUID links from item descriptions"]}
{"type":"entity","name":"Equipment System","entityType":"Actor Enhancement System","observations":["Located in scripts/mnemosphere-core.ts - handles equipping mnemospheres and combining their abilities","Actors store equipped mnemosphere UUIDs in flags['fabula-ultima-technosphere-machine']['equipped-mnemospheres']","Combines skills from all equipped mnemospheres, with skill levels stacking for same skill types","Features and spells are collected without level stacking from equipped mnemospheres","Generates 'Mnemo - [Name]' items on actors representing combined abilities with proper skill levels","Uses versioning system with MNEMOSPHERE_CORE_VERSION to track when recalculation is needed","Cleanup process removes old generated items before creating new ones to prevent duplication","extractItemsFromMnemospheres function processes equipped items and builds skill/feature/spell maps","Actor flag storage: actor.flags['fabula-ultima-technosphere-machine']['equipped-mnemospheres'] contains array of equipped mnemosphere UUIDs","Skill combination logic: Skills with same UUID have levels added together, features and spells collected without stacking","Generated item naming: 'Mnemo - [OriginalSkillName]' to distinguish from base character skills","Cleanup process: removeGeneratedItems() cleans old items before generateCombinedItems() creates new ones","MNEMOSPHERE_CORE_VERSION constant set to '1' for tracking when recalculation is needed","combineMnemosphereData function is the main entry point for combining equipped mnemosphere data","updateActorWithMnemosphereData function updates actors with combined data and cleans up old items","Uses versioning system with isActorMnemosphereCoreVersionCurrent to check if updates are needed","generateFlags function creates proper flags for generated items with mnemosphere-sources tracking","createItems helper function streamlines item creation with proper flag generation","SetupMnemosphereCoreHooks registers updateActor hook to automatically update when equipment changes","updateAllActorsForVersionChange function handles bulk updates when module version changes","Implements permission checking to ensure only owners/GM can update actors","Uses deleteEmbeddedDocuments followed by createEmbeddedDocuments for clean updates"]}
{"type":"entity","name":"Party Sheet Integration","entityType":"User Interface System","observations":["Located in scripts/party-sheet/party-sheet.ts - extends Foundry's party sheet with mnemosphere functionality","Provides UI for rolling new mnemospheres using Zenit currency as cost","generateNewMnemosphere function rolls class from roll table, then initial skills from class-specific table","Uses socket synchronization with 'roll-mnemosphere' event for GM-controlled rolling with player initiation","Includes mnemosphere card display showing equipped spheres with ability dots indicating skill ranks","Template at templates/inject/party-sheet/Mnemosphere-card.hbs shows sphere cards with images and skill levels","Supports heroic skill selection through popup interface when mnemospheres reach certain criteria","getMnemosphereRollCost function calculates Zenit cost for rolling new mnemospheres"]}
{"type":"entity","name":"Animation System","entityType":"Visual Effects System","observations":["Located in scripts/animations/ - sophisticated animation system using animejs library","playMnemosphereAnimation function creates visual effects when new mnemospheres are generated","PathWindowAnimator class handles complex path-based animations with stroke-dasharray manipulation","Development mode includes hot reload capabilities with Ctrl+L and animation testing with Ctrl+R","Animation overlay template at templates/animations/animation-overlay.hbs provides UI container","getPixelArtColors utility extracts color palettes from mnemosphere item images for theming","Separate build target for animations using esbuild configuration","Animation dev manager provides debugging tools and standalone testing capabilities"]}
{"type":"entity","name":"Roll Table System","entityType":"Generation Mechanics","observations":["Located in scripts/roll-table-utils.ts and scripts/roll-table/ - custom roll table functionality","rollTableCustom function extends Foundry's roll tables with custom logic for mnemosphere generation","Supports forced results for initial abilities and additional skill injection via flags","Uses compendium-based roll tables stored in packs/mnemosphere-rollable-tables/","getDocumentFromResult helper resolves compendium documents from roll table results","Migration utilities available for updating roll table structures","Flag-based configuration: mnemosphere-rolltable-force for guaranteed initial results","Recursive rolling protection with maximum depth limit to prevent infinite loops"]}
{"type":"entity","name":"UI Bindings and Templates","entityType":"User Interface Framework","observations":["Located in scripts/ui-bindings.ts - handles form interactions, drag/drop, and popup management","Templates use Handlebars (.hbs) format with preloaded templates for performance","Key templates: Mnemosphere-card.hbs (party sheet cards), mnemosphere-section.hbs (actor sheet equipment)","heroic-skill-popup.hbs provides modal for selecting heroic skills with search and filtering","CSS styles in styles/ directory provide modern UI styling for mnemosphere components","Drag and drop support for mnemosphere items and actor references","bindUUIDInput and bindHeroicSkillPopup functions handle specific UI interactions","Custom Handlebars helper 'times' for rendering skill rank dots"]}
{"type":"entity","name":"Build and Development System","entityType":"Development Toolchain","observations":["Uses esbuild.config.js for bundling with separate builds for main module and animations","TypeScript compilation with ES2022 target and ESM format output","Watch mode for development with sourcemaps and hot reloading","package.json scripts: build, watch, lint, publish, and foundry cli integration","DEV_MODE constant controls debug logging and development features","External exclusions for Foundry globals (game, ui, canvas) to prevent bundling conflicts","Concurrent builds for main and animation systems using concurrently package","Version bumping utilities and automated publishing workflow","npm scripts: 'npm run watch:all' for concurrent development, 'npm run build' for production, 'npm run publish' for release","esbuild configuration: ESM format, TypeScript compilation, external exclusions for Foundry globals, separate animation builds","Development debugging: DEV_MODE enables console logging, animation hot reload with Ctrl+L, debug overlay available","Release workflow: Version bumping with scripts/version-bump.js, automated module packaging with package-module.ps1"]}
{"type":"entity","name":"Code Architecture and Patterns","entityType":"Development Standards","observations":["TypeScript strict mode with branded types for ID safety and interface-first design","Functional programming patterns with Map/Set aggregation and immutable operations","Error handling via try/catch with Log() function for conditional debug output","JSDoc documentation required for all exported symbols","Naming conventions: PascalCase for types, camelCase for functions, kebab-case for files","Hook-based architecture with SetupXXXHooks functions for each subsystem","Socket synchronization pattern for multiplayer coordination","Flag-based persistence using Foundry's document flag system"]}
{"type":"relation","from":"Fabula Ultima Technosphere Machine","to":"Relations System","relationType":"uses core system"}
{"type":"relation","from":"Fabula Ultima Technosphere Machine","to":"Mnemosphere Detection System","relationType":"implements processing via"}
{"type":"relation","from":"Fabula Ultima Technosphere Machine","to":"Equipment System","relationType":"provides functionality through"}
{"type":"relation","from":"Relations System","to":"Mnemosphere Detection System","relationType":"stores data from"}
{"type":"relation","from":"Relations System","to":"Equipment System","relationType":"provides data to"}
{"type":"relation","from":"Mnemosphere Detection System","to":"Roll Table System","relationType":"processes items from"}
{"type":"relation","from":"Equipment System","to":"UI Bindings and Templates","relationType":"displays data through"}
{"type":"relation","from":"Party Sheet Integration","to":"Roll Table System","relationType":"triggers generation via"}
{"type":"relation","from":"Party Sheet Integration","to":"Animation System","relationType":"plays effects using"}
{"type":"relation","from":"Animation System","to":"Build and Development System","relationType":"built separately by"}
{"type":"relation","from":"UI Bindings and Templates","to":"Party Sheet Integration","relationType":"handles interactions for"}
{"type":"relation","from":"Build and Development System","to":"Code Architecture and Patterns","relationType":"enforces standards via"}
{"type":"relation","from":"Code Architecture and Patterns","to":"Relations System","relationType":"guides implementation of"}
{"type":"relation","from":"Roll Table System","to":"Relations System","relationType":"populates data in"}